# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "http://localhost"

const _returntypes_create_car_v1_api_v1_cars_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CarResponseV1,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_car_v1_api_v1_cars_post(_api::DefaultApi, car_create_v1::CarCreateV1; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_car_v1_api_v1_cars_post_DefaultApi, "/api/v1/cars", [], car_create_v1)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Car V1

Create a new car (V1).

Params:
- car_create_v1::CarCreateV1 (required)

Return: CarResponseV1, OpenAPI.Clients.ApiResponse
"""
function create_car_v1_api_v1_cars_post(_api::DefaultApi, car_create_v1::CarCreateV1; _mediaType=nothing)
    _ctx = _oacinternal_create_car_v1_api_v1_cars_post(_api, car_create_v1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_car_v1_api_v1_cars_post(_api::DefaultApi, response_stream::Channel, car_create_v1::CarCreateV1; _mediaType=nothing)
    _ctx = _oacinternal_create_car_v1_api_v1_cars_post(_api, car_create_v1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_car_v2_api_v2_cars_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CarResponseV2,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_car_v2_api_v2_cars_post(_api::DefaultApi, car_create_v2::CarCreateV2; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_car_v2_api_v2_cars_post_DefaultApi, "/api/v2/cars", [], car_create_v2)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Car V2

Create a new car (V2).

Params:
- car_create_v2::CarCreateV2 (required)

Return: CarResponseV2, OpenAPI.Clients.ApiResponse
"""
function create_car_v2_api_v2_cars_post(_api::DefaultApi, car_create_v2::CarCreateV2; _mediaType=nothing)
    _ctx = _oacinternal_create_car_v2_api_v2_cars_post(_api, car_create_v2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_car_v2_api_v2_cars_post(_api::DefaultApi, response_stream::Channel, car_create_v2::CarCreateV2; _mediaType=nothing)
    _ctx = _oacinternal_create_car_v2_api_v2_cars_post(_api, car_create_v2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_truck_v1_api_v1_trucks_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TruckResponseV1,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_truck_v1_api_v1_trucks_post(_api::DefaultApi, truck_create_v1::TruckCreateV1; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_truck_v1_api_v1_trucks_post_DefaultApi, "/api/v1/trucks", [], truck_create_v1)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Truck V1

Create a new truck (V1).

Params:
- truck_create_v1::TruckCreateV1 (required)

Return: TruckResponseV1, OpenAPI.Clients.ApiResponse
"""
function create_truck_v1_api_v1_trucks_post(_api::DefaultApi, truck_create_v1::TruckCreateV1; _mediaType=nothing)
    _ctx = _oacinternal_create_truck_v1_api_v1_trucks_post(_api, truck_create_v1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_truck_v1_api_v1_trucks_post(_api::DefaultApi, response_stream::Channel, truck_create_v1::TruckCreateV1; _mediaType=nothing)
    _ctx = _oacinternal_create_truck_v1_api_v1_trucks_post(_api, truck_create_v1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_truck_v2_api_v2_trucks_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TruckResponseV2,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_truck_v2_api_v2_trucks_post(_api::DefaultApi, truck_create_v2::TruckCreateV2; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_truck_v2_api_v2_trucks_post_DefaultApi, "/api/v2/trucks", [], truck_create_v2)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Truck V2

Create a new truck (V2).

Params:
- truck_create_v2::TruckCreateV2 (required)

Return: TruckResponseV2, OpenAPI.Clients.ApiResponse
"""
function create_truck_v2_api_v2_trucks_post(_api::DefaultApi, truck_create_v2::TruckCreateV2; _mediaType=nothing)
    _ctx = _oacinternal_create_truck_v2_api_v2_trucks_post(_api, truck_create_v2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_truck_v2_api_v2_trucks_post(_api::DefaultApi, response_stream::Channel, truck_create_v2::TruckCreateV2; _mediaType=nothing)
    _ctx = _oacinternal_create_truck_v2_api_v2_trucks_post(_api, truck_create_v2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_vehicle_v1_api_v1_vehicles_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VehicleResponseV1,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_vehicle_v1_api_v1_vehicles_post(_api::DefaultApi, vehicle::Vehicle; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_vehicle_v1_api_v1_vehicles_post_DefaultApi, "/api/v1/vehicles", [], vehicle)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Vehicle V1

Create a new vehicle (V1).

Params:
- vehicle::Vehicle (required)

Return: VehicleResponseV1, OpenAPI.Clients.ApiResponse
"""
function create_vehicle_v1_api_v1_vehicles_post(_api::DefaultApi, vehicle::Vehicle; _mediaType=nothing)
    _ctx = _oacinternal_create_vehicle_v1_api_v1_vehicles_post(_api, vehicle; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_vehicle_v1_api_v1_vehicles_post(_api::DefaultApi, response_stream::Channel, vehicle::Vehicle; _mediaType=nothing)
    _ctx = _oacinternal_create_vehicle_v1_api_v1_vehicles_post(_api, vehicle; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_vehicle_v2_api_v2_vehicles_post_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VehicleResponseV2,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_vehicle_v2_api_v2_vehicles_post(_api::DefaultApi, vehicle1::Vehicle1; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_vehicle_v2_api_v2_vehicles_post_DefaultApi, "/api/v2/vehicles", [], vehicle1)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Vehicle V2

Create a new vehicle (V2).

Params:
- vehicle1::Vehicle1 (required)

Return: VehicleResponseV2, OpenAPI.Clients.ApiResponse
"""
function create_vehicle_v2_api_v2_vehicles_post(_api::DefaultApi, vehicle1::Vehicle1; _mediaType=nothing)
    _ctx = _oacinternal_create_vehicle_v2_api_v2_vehicles_post(_api, vehicle1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_vehicle_v2_api_v2_vehicles_post(_api::DefaultApi, response_stream::Channel, vehicle1::Vehicle1; _mediaType=nothing)
    _ctx = _oacinternal_create_vehicle_v2_api_v2_vehicles_post(_api, vehicle1; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_cars_v1_api_v1_cars_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{CarResponseV1},
)

function _oacinternal_get_cars_v1_api_v1_cars_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_cars_v1_api_v1_cars_get_DefaultApi, "/api/v1/cars", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Cars V1

Retrieve a list of cars (V1).

Params:

Return: Vector{CarResponseV1}, OpenAPI.Clients.ApiResponse
"""
function get_cars_v1_api_v1_cars_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_cars_v1_api_v1_cars_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_cars_v1_api_v1_cars_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_cars_v1_api_v1_cars_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_cars_v2_api_v2_cars_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{CarResponseV2},
)

function _oacinternal_get_cars_v2_api_v2_cars_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_cars_v2_api_v2_cars_get_DefaultApi, "/api/v2/cars", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Cars V2

Retrieve a list of cars (V2).

Params:

Return: Vector{CarResponseV2}, OpenAPI.Clients.ApiResponse
"""
function get_cars_v2_api_v2_cars_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_cars_v2_api_v2_cars_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_cars_v2_api_v2_cars_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_cars_v2_api_v2_cars_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_trucks_v1_api_v1_trucks_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TruckResponseV1},
)

function _oacinternal_get_trucks_v1_api_v1_trucks_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_trucks_v1_api_v1_trucks_get_DefaultApi, "/api/v1/trucks", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Trucks V1

Retrieve a list of trucks (V1).

Params:

Return: Vector{TruckResponseV1}, OpenAPI.Clients.ApiResponse
"""
function get_trucks_v1_api_v1_trucks_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_trucks_v1_api_v1_trucks_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_trucks_v1_api_v1_trucks_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_trucks_v1_api_v1_trucks_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_trucks_v2_api_v2_trucks_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TruckResponseV2},
)

function _oacinternal_get_trucks_v2_api_v2_trucks_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_trucks_v2_api_v2_trucks_get_DefaultApi, "/api/v2/trucks", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Trucks V2

Retrieve a list of trucks (V2).

Params:

Return: Vector{TruckResponseV2}, OpenAPI.Clients.ApiResponse
"""
function get_trucks_v2_api_v2_trucks_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_trucks_v2_api_v2_trucks_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_trucks_v2_api_v2_trucks_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_trucks_v2_api_v2_trucks_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_vehicles_v1_api_v1_vehicles_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{VehicleResponseV1},
)

function _oacinternal_get_vehicles_v1_api_v1_vehicles_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_vehicles_v1_api_v1_vehicles_get_DefaultApi, "/api/v1/vehicles", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Vehicles V1

Retrieve a list of vehicles (V1).

Params:

Return: Vector{VehicleResponseV1}, OpenAPI.Clients.ApiResponse
"""
function get_vehicles_v1_api_v1_vehicles_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_vehicles_v1_api_v1_vehicles_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_vehicles_v1_api_v1_vehicles_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_vehicles_v1_api_v1_vehicles_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_vehicles_v2_api_v2_vehicles_get_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{VehicleResponseV2},
)

function _oacinternal_get_vehicles_v2_api_v2_vehicles_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_vehicles_v2_api_v2_vehicles_get_DefaultApi, "/api/v2/vehicles", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Vehicles V2

Retrieve a list of vehicles (V2).

Params:

Return: Vector{VehicleResponseV2}, OpenAPI.Clients.ApiResponse
"""
function get_vehicles_v2_api_v2_vehicles_get(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_vehicles_v2_api_v2_vehicles_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_vehicles_v2_api_v2_vehicles_get(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_vehicles_v2_api_v2_vehicles_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_car_v1_api_v1_cars_post
export create_car_v2_api_v2_cars_post
export create_truck_v1_api_v1_trucks_post
export create_truck_v2_api_v2_trucks_post
export create_vehicle_v1_api_v1_vehicles_post
export create_vehicle_v2_api_v2_vehicles_post
export get_cars_v1_api_v1_cars_get
export get_cars_v2_api_v2_cars_get
export get_trucks_v1_api_v1_trucks_get
export get_trucks_v2_api_v2_trucks_get
export get_vehicles_v1_api_v1_vehicles_get
export get_vehicles_v2_api_v2_vehicles_get
