# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CarCreateV1
Schema for creating a car (V1).

    CarCreateV1(;
        make=nothing,
        model=nothing,
        year=nothing,
        color=nothing,
        vin=nothing,
        mileage=nothing,
        last_service_date=nothing,
        doors=nothing,
        trunk_capacity=nothing,
        fuel_type=nothing,
        transmission=nothing,
    )

    - make::String : Make of the vehicle
    - model::String : Model of the vehicle
    - year::Int64 : Year of manufacture
    - color::String : Color of the vehicle
    - vin::String : Vehicle Identification Number (VIN)
    - mileage::Float64 : Current mileage of the vehicle
    - last_service_date::Date
    - doors::Int64 : Number of doors
    - trunk_capacity::Float64 : Trunk capacity in cubic feet
    - fuel_type::FuelType : Type of fuel used
    - transmission::TransmissionType : Type of transmission
"""
Base.@kwdef mutable struct CarCreateV1 <: OpenAPI.APIModel
    make::Union{Nothing, String} = nothing
    model::Union{Nothing, String} = nothing
    year::Union{Nothing, Int64} = nothing
    color::Union{Nothing, String} = nothing
    vin::Union{Nothing, String} = nothing
    mileage::Union{Nothing, Float64} = nothing
    last_service_date::Union{Nothing, Date} = nothing
    doors::Union{Nothing, Int64} = nothing
    trunk_capacity::Union{Nothing, Float64} = nothing
    fuel_type = nothing # spec type: Union{ Nothing, FuelType }
    transmission = nothing # spec type: Union{ Nothing, TransmissionType }

    function CarCreateV1(make, model, year, color, vin, mileage, last_service_date, doors, trunk_capacity, fuel_type, transmission, )
        o = new(make, model, year, color, vin, mileage, last_service_date, doors, trunk_capacity, fuel_type, transmission, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type CarCreateV1

const _property_types_CarCreateV1 = Dict{Symbol,String}(Symbol("make")=>"String", Symbol("model")=>"String", Symbol("year")=>"Int64", Symbol("color")=>"String", Symbol("vin")=>"String", Symbol("mileage")=>"Float64", Symbol("last_service_date")=>"Date", Symbol("doors")=>"Int64", Symbol("trunk_capacity")=>"Float64", Symbol("fuel_type")=>"FuelType", Symbol("transmission")=>"TransmissionType", )
OpenAPI.property_type(::Type{ CarCreateV1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CarCreateV1[name]))}

function OpenAPI.check_required(o::CarCreateV1)
    o.make === nothing && (return false)
    o.model === nothing && (return false)
    o.year === nothing && (return false)
    o.color === nothing && (return false)
    o.vin === nothing && (return false)
    o.mileage === nothing && (return false)
    o.doors === nothing && (return false)
    o.trunk_capacity === nothing && (return false)
    o.fuel_type === nothing && (return false)
    o.transmission === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::CarCreateV1)
    OpenAPI.validate_property(CarCreateV1, Symbol("make"), o.make)
    OpenAPI.validate_property(CarCreateV1, Symbol("model"), o.model)
    OpenAPI.validate_property(CarCreateV1, Symbol("year"), o.year)
    OpenAPI.validate_property(CarCreateV1, Symbol("color"), o.color)
    OpenAPI.validate_property(CarCreateV1, Symbol("vin"), o.vin)
    OpenAPI.validate_property(CarCreateV1, Symbol("mileage"), o.mileage)
    OpenAPI.validate_property(CarCreateV1, Symbol("last_service_date"), o.last_service_date)
    OpenAPI.validate_property(CarCreateV1, Symbol("doors"), o.doors)
    OpenAPI.validate_property(CarCreateV1, Symbol("trunk_capacity"), o.trunk_capacity)
    OpenAPI.validate_property(CarCreateV1, Symbol("fuel_type"), o.fuel_type)
    OpenAPI.validate_property(CarCreateV1, Symbol("transmission"), o.transmission)
end

function OpenAPI.validate_property(::Type{ CarCreateV1 }, name::Symbol, val)



    if name === Symbol("year")
        OpenAPI.validate_param(name, "CarCreateV1", :maximum, val, 2025, false)
        OpenAPI.validate_param(name, "CarCreateV1", :minimum, val, 1950, false)
    end


    if name === Symbol("vin")
        OpenAPI.validate_param(name, "CarCreateV1", :maxLength, val, 17)
        OpenAPI.validate_param(name, "CarCreateV1", :minLength, val, 17)
    end

    if name === Symbol("mileage")
        OpenAPI.validate_param(name, "CarCreateV1", :minimum, val, 0.0, false)
    end

    if name === Symbol("last_service_date")
        OpenAPI.validate_param(name, "CarCreateV1", :format, val, "date")
    end

    if name === Symbol("doors")
        OpenAPI.validate_param(name, "CarCreateV1", :maximum, val, 5, false)
        OpenAPI.validate_param(name, "CarCreateV1", :minimum, val, 2, false)
    end

    if name === Symbol("trunk_capacity")
        OpenAPI.validate_param(name, "CarCreateV1", :maximum, val, 100.0, false)
        OpenAPI.validate_param(name, "CarCreateV1", :minimum, val, 0.0, false)
    end


end
