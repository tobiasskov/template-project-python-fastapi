# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VehicleResponseV1
Base response schema including ID (V1).

    VehicleResponseV1(;
        make=nothing,
        model=nothing,
        year=nothing,
        color=nothing,
        vin=nothing,
        mileage=nothing,
        last_service_date=nothing,
        id=nothing,
    )

    - make::String : Make of the vehicle
    - model::String : Model of the vehicle
    - year::Int64 : Year of manufacture
    - color::String : Color of the vehicle
    - vin::String : Vehicle Identification Number (VIN)
    - mileage::Float64 : Current mileage of the vehicle
    - last_service_date::Date
    - id::String : Unique identifier for the vehicle
"""
Base.@kwdef mutable struct VehicleResponseV1 <: OpenAPI.APIModel
    make::Union{Nothing, String} = nothing
    model::Union{Nothing, String} = nothing
    year::Union{Nothing, Int64} = nothing
    color::Union{Nothing, String} = nothing
    vin::Union{Nothing, String} = nothing
    mileage::Union{Nothing, Float64} = nothing
    last_service_date::Union{Nothing, Date} = nothing
    id::Union{Nothing, String} = nothing

    function VehicleResponseV1(make, model, year, color, vin, mileage, last_service_date, id, )
        o = new(make, model, year, color, vin, mileage, last_service_date, id, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VehicleResponseV1

const _property_types_VehicleResponseV1 = Dict{Symbol,String}(Symbol("make")=>"String", Symbol("model")=>"String", Symbol("year")=>"Int64", Symbol("color")=>"String", Symbol("vin")=>"String", Symbol("mileage")=>"Float64", Symbol("last_service_date")=>"Date", Symbol("id")=>"String", )
OpenAPI.property_type(::Type{ VehicleResponseV1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VehicleResponseV1[name]))}

function OpenAPI.check_required(o::VehicleResponseV1)
    o.make === nothing && (return false)
    o.model === nothing && (return false)
    o.year === nothing && (return false)
    o.color === nothing && (return false)
    o.vin === nothing && (return false)
    o.mileage === nothing && (return false)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::VehicleResponseV1)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("make"), o.make)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("model"), o.model)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("year"), o.year)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("color"), o.color)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("vin"), o.vin)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("mileage"), o.mileage)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("last_service_date"), o.last_service_date)
    OpenAPI.validate_property(VehicleResponseV1, Symbol("id"), o.id)
end

function OpenAPI.validate_property(::Type{ VehicleResponseV1 }, name::Symbol, val)





    if name === Symbol("vin")
        OpenAPI.validate_param(name, "VehicleResponseV1", :maxLength, val, 17)
        OpenAPI.validate_param(name, "VehicleResponseV1", :minLength, val, 17)
    end

    if name === Symbol("mileage")
        OpenAPI.validate_param(name, "VehicleResponseV1", :minimum, val, 0.0, false)
    end

    if name === Symbol("last_service_date")
        OpenAPI.validate_param(name, "VehicleResponseV1", :format, val, "date")
    end

    if name === Symbol("id")
        OpenAPI.validate_param(name, "VehicleResponseV1", :format, val, "uuid")
    end
end
