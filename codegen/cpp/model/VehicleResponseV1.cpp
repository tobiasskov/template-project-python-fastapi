/**
* System Designer Schemas
* JSON schemas for the System Designer project
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "VehicleResponseV1.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

VehicleResponseV1::VehicleResponseV1()
{
    m_Make = "";
    m_Model = "";
    m_Year = 0;
    m_Color = "";
    m_Vin = "";
    m_Mileage = 0.0;
    m_Last_service_dateIsSet = false;
    m_Id = "";
    
}

void VehicleResponseV1::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool VehicleResponseV1::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool VehicleResponseV1::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "VehicleResponseV1" : pathPrefix;

                 
    
    /* Year */ {
        const int32_t& value = m_Year;
        const std::string currentValuePath = _pathPrefix + ".year";
                
        
        if (value < 1950)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1950;";
        }
        if (value > 2025)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 2025;";
        }

    }
             
    
    /* Vin */ {
        const std::string& value = m_Vin;
        const std::string currentValuePath = _pathPrefix + ".vin";
                
        
        if (value.length() < 17)
        {
            success = false;
            msg << currentValuePath << ": must be at least 17 characters long;";
        }
        if (value.length() > 17)
        {
            success = false;
            msg << currentValuePath << ": must be at most 17 characters long;";
        }

    }
         
    
    /* Mileage */ {
        const double& value = m_Mileage;
        const std::string currentValuePath = _pathPrefix + ".mileage";
                
        
        if (value < 0.0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0.0;";
        }

    }
            
    return success;
}

bool VehicleResponseV1::operator==(const VehicleResponseV1& rhs) const
{
    return
    
    
    (getMake() == rhs.getMake())
     &&
    
    (getModel() == rhs.getModel())
     &&
    
    (getYear() == rhs.getYear())
     &&
    
    (getColor() == rhs.getColor())
     &&
    
    (getVin() == rhs.getVin())
     &&
    
    (getMileage() == rhs.getMileage())
     &&
    
    
    ((!lastServiceDateIsSet() && !rhs.lastServiceDateIsSet()) || (lastServiceDateIsSet() && rhs.lastServiceDateIsSet() && getLastServiceDate() == rhs.getLastServiceDate())) &&
    
    (getId() == rhs.getId())
    
    
    ;
}

bool VehicleResponseV1::operator!=(const VehicleResponseV1& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VehicleResponseV1& o)
{
    j = nlohmann::json::object();
    j["make"] = o.m_Make;
    j["model"] = o.m_Model;
    j["year"] = o.m_Year;
    j["color"] = o.m_Color;
    j["vin"] = o.m_Vin;
    j["mileage"] = o.m_Mileage;
    if(o.lastServiceDateIsSet())
        j["last_service_date"] = o.m_Last_service_date;
    j["id"] = o.m_Id;
    
}

void from_json(const nlohmann::json& j, VehicleResponseV1& o)
{
    j.at("make").get_to(o.m_Make);
    j.at("model").get_to(o.m_Model);
    j.at("year").get_to(o.m_Year);
    j.at("color").get_to(o.m_Color);
    j.at("vin").get_to(o.m_Vin);
    j.at("mileage").get_to(o.m_Mileage);
    if(j.find("last_service_date") != j.end())
    {
        j.at("last_service_date").get_to(o.m_Last_service_date);
        o.m_Last_service_dateIsSet = true;
    } 
    j.at("id").get_to(o.m_Id);
    
}

std::string VehicleResponseV1::getMake() const
{
    return m_Make;
}
void VehicleResponseV1::setMake(std::string const& value)
{
    m_Make = value;
}
std::string VehicleResponseV1::getModel() const
{
    return m_Model;
}
void VehicleResponseV1::setModel(std::string const& value)
{
    m_Model = value;
}
int32_t VehicleResponseV1::getYear() const
{
    return m_Year;
}
void VehicleResponseV1::setYear(int32_t const value)
{
    m_Year = value;
}
std::string VehicleResponseV1::getColor() const
{
    return m_Color;
}
void VehicleResponseV1::setColor(std::string const& value)
{
    m_Color = value;
}
std::string VehicleResponseV1::getVin() const
{
    return m_Vin;
}
void VehicleResponseV1::setVin(std::string const& value)
{
    m_Vin = value;
}
double VehicleResponseV1::getMileage() const
{
    return m_Mileage;
}
void VehicleResponseV1::setMileage(double const value)
{
    m_Mileage = value;
}
std::string VehicleResponseV1::getLastServiceDate() const
{
    return m_Last_service_date;
}
void VehicleResponseV1::setLastServiceDate(std::string const& value)
{
    m_Last_service_date = value;
    m_Last_service_dateIsSet = true;
}
bool VehicleResponseV1::lastServiceDateIsSet() const
{
    return m_Last_service_dateIsSet;
}
void VehicleResponseV1::unsetLast_service_date()
{
    m_Last_service_dateIsSet = false;
}
std::string VehicleResponseV1::getId() const
{
    return m_Id;
}
void VehicleResponseV1::setId(std::string const& value)
{
    m_Id = value;
}


} // namespace org::openapitools::server::model

