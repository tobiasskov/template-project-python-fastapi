/**
* System Designer Schemas
* JSON schemas for the System Designer project
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ValidationError.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ValidationError::ValidationError()
{
    m_Msg = "";
    m_Type = "";
    
}

void ValidationError::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ValidationError::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ValidationError::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ValidationError" : pathPrefix;

         
    
    /* Loc */ {
        const std::vector<org::openapitools::server::model::ValidationError_loc_inner>& value = m_Loc;
        const std::string currentValuePath = _pathPrefix + ".loc";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ValidationError_loc_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".loc") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool ValidationError::operator==(const ValidationError& rhs) const
{
    return
    
    
    (getLoc() == rhs.getLoc())
     &&
    
    (getMsg() == rhs.getMsg())
     &&
    
    (getType() == rhs.getType())
    
    
    ;
}

bool ValidationError::operator!=(const ValidationError& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ValidationError& o)
{
    j = nlohmann::json::object();
    j["loc"] = o.m_Loc;
    j["msg"] = o.m_Msg;
    j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, ValidationError& o)
{
    j.at("loc").get_to(o.m_Loc);
    j.at("msg").get_to(o.m_Msg);
    j.at("type").get_to(o.m_Type);
    
}

std::vector<org::openapitools::server::model::ValidationError_loc_inner> ValidationError::getLoc() const
{
    return m_Loc;
}
void ValidationError::setLoc(std::vector<org::openapitools::server::model::ValidationError_loc_inner> const& value)
{
    m_Loc = value;
}
std::string ValidationError::getMsg() const
{
    return m_Msg;
}
void ValidationError::setMsg(std::string const& value)
{
    m_Msg = value;
}
std::string ValidationError::getType() const
{
    return m_Type;
}
void ValidationError::setType(std::string const& value)
{
    m_Type = value;
}


} // namespace org::openapitools::server::model

