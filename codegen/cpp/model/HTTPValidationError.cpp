/**
* System Designer Schemas
* JSON schemas for the System Designer project
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "HTTPValidationError.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

HTTPValidationError::HTTPValidationError()
{
    m_DetailIsSet = false;
    
}

void HTTPValidationError::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool HTTPValidationError::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool HTTPValidationError::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "HTTPValidationError" : pathPrefix;

         
    if (detailIsSet())
    {
        const std::vector<org::openapitools::server::model::ValidationError>& value = m_Detail;
        const std::string currentValuePath = _pathPrefix + ".detail";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ValidationError& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".detail") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool HTTPValidationError::operator==(const HTTPValidationError& rhs) const
{
    return
    
    
    
    ((!detailIsSet() && !rhs.detailIsSet()) || (detailIsSet() && rhs.detailIsSet() && getDetail() == rhs.getDetail()))
    
    ;
}

bool HTTPValidationError::operator!=(const HTTPValidationError& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const HTTPValidationError& o)
{
    j = nlohmann::json::object();
    if(o.detailIsSet() || !o.m_Detail.empty())
        j["detail"] = o.m_Detail;
    
}

void from_json(const nlohmann::json& j, HTTPValidationError& o)
{
    if(j.find("detail") != j.end())
    {
        j.at("detail").get_to(o.m_Detail);
        o.m_DetailIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::ValidationError> HTTPValidationError::getDetail() const
{
    return m_Detail;
}
void HTTPValidationError::setDetail(std::vector<org::openapitools::server::model::ValidationError> const& value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}
bool HTTPValidationError::detailIsSet() const
{
    return m_DetailIsSet;
}
void HTTPValidationError::unsetDetail()
{
    m_DetailIsSet = false;
}


} // namespace org::openapitools::server::model

