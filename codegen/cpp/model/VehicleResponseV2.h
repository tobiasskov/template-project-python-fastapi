/**
* System Designer Schemas
* JSON schemas for the System Designer project
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * VehicleResponseV2.h
 *
 * Base response schema including ID (V2).
 */

#ifndef VehicleResponseV2_H_
#define VehicleResponseV2_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Base response schema including ID (V2).
/// </summary>
class  VehicleResponseV2
{
public:
    VehicleResponseV2();
    virtual ~VehicleResponseV2() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const VehicleResponseV2& rhs) const;
    bool operator!=(const VehicleResponseV2& rhs) const;

    /////////////////////////////////////////////
    /// VehicleResponseV2 members

    /// <summary>
    /// Make of the vehicle
    /// </summary>
    std::string getMake() const;
    void setMake(std::string const& value);
    /// <summary>
    /// Model of the vehicle
    /// </summary>
    std::string getModel() const;
    void setModel(std::string const& value);
    /// <summary>
    /// Year of manufacture
    /// </summary>
    int32_t getYear() const;
    void setYear(int32_t const value);
    /// <summary>
    /// Color of the vehicle
    /// </summary>
    std::string getColor() const;
    void setColor(std::string const& value);
    /// <summary>
    /// Vehicle Identification Number (VIN)
    /// </summary>
    std::string getVin() const;
    void setVin(std::string const& value);
    /// <summary>
    /// Vehicle registration number
    /// </summary>
    std::string getRegistrationNumber() const;
    void setRegistrationNumber(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getInsuranceExpiry() const;
    void setInsuranceExpiry(std::string const& value);
    bool insuranceExpiryIsSet() const;
    void unsetInsurance_expiry();
    /// <summary>
    /// Whether the vehicle is available for use
    /// </summary>
    bool isIsAvailable() const;
    void setIsAvailable(bool const value);
    bool isAvailableIsSet() const;
    void unsetIs_available();
    /// <summary>
    /// Unique identifier for the vehicle
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// Current mileage of the vehicle
    /// </summary>
    double getMileage() const;
    void setMileage(double const value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLastServiceDate() const;
    void setLastServiceDate(std::string const& value);
    bool lastServiceDateIsSet() const;
    void unsetLast_service_date();

    friend  void to_json(nlohmann::json& j, const VehicleResponseV2& o);
    friend  void from_json(const nlohmann::json& j, VehicleResponseV2& o);
protected:
    std::string m_Make;

    std::string m_Model;

    int32_t m_Year;

    std::string m_Color;

    std::string m_Vin;

    std::string m_Registration_number;

    std::string m_Insurance_expiry;
    bool m_Insurance_expiryIsSet;
    bool m_Is_available;
    bool m_Is_availableIsSet;
    std::string m_Id;

    double m_Mileage;

    std::string m_Last_service_date;
    bool m_Last_service_dateIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* VehicleResponseV2_H_ */
